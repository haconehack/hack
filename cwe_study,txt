
1. CWE-682: 계산 관련 버그

https://cwe.mitre.org/data/definitions/682.html


1. CWE-131: 부적절한 버퍼 크기 계산

1-1. 부적절한 버퍼 계산 오류

소프트웨어는 버퍼를 할당할 때 부적절한 크기여서, 버퍼 오버플로우가 발생하는 결과를 낳을 수 있다.

--
int i
unsigned int numWidgets;
Widget **WidgetList;

// 신뢰되지 않는 크기 정보를 numWidgets()로 얻음.
numWidgets = GetUntrustedSizeValue();

// numWidgets이 0(NULL)이 아니고, MAX_NUM_WIDGETS을 넘지 않으면 진행. (off-by-one)
if((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {
  ExitError("Incorrect number of widgets requested!");
}

// 아주 큰 Widget 을 할당 가능. (off-by-one 발생)
WidgetsList = (Widget **)malloc(numWidgets * sizeof(Widget *));
printf("WidgetList ptr=%p\n", WidgetList);

// 올바른 코드임.
for(i=0; i<numWidgets;i++){
  WidgetList[i] = InitializeWidget();
}

// NULL을 out-out-bounds로 씀.
WidgetList[numWidgets] = NULL;

// showWidgets()함수 내부에서 메모리 커럽션이 발생 가능. 
showWidgets(WidgetList);
--

--

--
img_t table_ptr;
int num_imgs;
...
num_imgs = get_num_imgs();
table_ptr = (img_t*)malloc((sizeof(img_t)*num_imgs);
...
--
이 코드는 num_imgs 크기로 테이블을 할당한다, 계산시에 오버플로우가 발생할 수 있다.
num_imgs가 long이었다면, out-of-bounds의 많은 타입이 된다.

get_num_imgs() 함수 호출로 num_imgs()를 얻는데, 이 함수에서 작은 수의
버퍼를 할당하게끔 리턴된 경우에 스택 오버플로우가 발생할 수 있다는 얘기네요.


--
char * copy_input(char *user_supplied_string){
int i, dst_index;
char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);
if ( MAX_SIZE <= strlen(user_supplied_string) ){
die("user string too long, die evil hacker!");
}
dst_index = 0;
for ( i = 0; i < strlen(user_supplied_string); i++ ){
if( '&' == user_supplied_string[i] ){
dst_buf[dst_index++] = '&';
dst_buf[dst_index++] = 'a';
dst_buf[dst_index++] = 'm';
dst_buf[dst_index++] = 'p';
dst_buf[dst_index++] = ';';
}
else if ('<' == user_supplied_string[i] ){

/* encode to &lt; */
}
else dst_buf[dst_index++] = user_supplied_string[i];
}
return dst_buf;
}
--

--
DataPacket *packet;
int numHeaders; // 부호있는 정수 numHeaders 정의됨. 음수가 될 수 있음. 패킷값이 -3으로 오면 됨.
PacketHeader *headers;

sock=AcceptSocketConnection();
ReadPacket(packet, sock);
numHeaders =packet->headers; // packet->headers가 -300이나 그러면, 아주 작은 버퍼가 할당됨.

if (numHeaders > 100) { // numHeaders가 100을 넘으면 안됨. 
ExitError("too many headers!");
}

// 100이하의 값 * 패킷 헤더 크기 곱해서 headers 메모리 할당.
headers = malloc(numHeaders * sizeof(PacketHeader);

// 파싱. (버퍼 오버플로우 발생 가능).
ParsePacketHeaders(packet, headers);
--

--
int *id_sequence;

/* Allocate space for an array of three ids. */


// 1바이트 3개를 할당하는 버그가 있는 코드로 3바이트를 할당했다. id_sequence[0]에서 1바이트
// 이상 넘어서서 덮어쓰기가 가능한 버그가 발생할 수 있다. malloc(3*sizeof(int))로 할당해야 안전 코드임.
id_sequence = (int*) malloc(3);
if (id_sequence == NULL) exit(1);

/* Populate the id array. */


id_sequence[0] = 13579; // 버그 발생 가능.
id_sequence[1] = 24680;
id_sequence[2] = 97531;
--


